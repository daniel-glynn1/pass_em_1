[{"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/index.tsx":"1","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/reportWebVitals.ts":"2","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/App.tsx":"3","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/services/socketService.ts":"4","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/services/gameService.ts":"5","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/shared/types/socketExceptions.ts":"6","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/shared/types/clientEvents.ts":"7","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/shared/types/serverEvents.ts":"8","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/game/game.tsx":"9","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameRoom/gameRoom.tsx":"10","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameTable/gameTable.tsx":"11","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gamePlayers/gamePlayers.tsx":"12","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameControlBar/gameControlBar.tsx":"13","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameChat/gameChat.tsx":"14","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameHeader/gameHeader.tsx":"15","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/recoilTypes.ts":"16","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/joinRoom/joinRoom/joinRoom.tsx":"17","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/joinRoom/finalScoreSelector/finalScoreSelector.tsx":"18","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/joinRoom/numPlayersSelector/numPlayersSelector.tsx":"19","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/joinRoom/rebuttalSelector/rebuttalSelector.tsx":"20","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameTable/gameMenu/gameMenu.tsx":"21","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameTable/gamePigs/gamePigs.tsx":"22","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameTable/gameRules/gameRules.tsx":"23"},{"size":668,"mtime":1696542445749,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":1695422561666,"results":"26","hashOfConfig":"25"},{"size":2281,"mtime":1716241361775,"results":"27","hashOfConfig":"25"},{"size":637,"mtime":1695679645661,"results":"28","hashOfConfig":"25"},{"size":5097,"mtime":1697662306254,"results":"29","hashOfConfig":"25"},{"size":251,"mtime":1696007707447,"results":"30","hashOfConfig":"25"},{"size":414,"mtime":1697660869255,"results":"31","hashOfConfig":"25"},{"size":359,"mtime":1696897980181,"results":"32","hashOfConfig":"25"},{"size":598,"mtime":1697567431261,"results":"33","hashOfConfig":"25"},{"size":591,"mtime":1697061481089,"results":"34","hashOfConfig":"25"},{"size":1586,"mtime":1697568233867,"results":"35","hashOfConfig":"25"},{"size":832,"mtime":1697131194665,"results":"36","hashOfConfig":"25"},{"size":3204,"mtime":1697492245122,"results":"37","hashOfConfig":"25"},{"size":2413,"mtime":1697227598812,"results":"38","hashOfConfig":"25"},{"size":1063,"mtime":1716235295083,"results":"39","hashOfConfig":"25"},{"size":1246,"mtime":1697663923343,"results":"40","hashOfConfig":"25"},{"size":6462,"mtime":1715981245111,"results":"41","hashOfConfig":"25"},{"size":838,"mtime":1697136550219,"results":"42","hashOfConfig":"25"},{"size":856,"mtime":1697136555977,"results":"43","hashOfConfig":"25"},{"size":1521,"mtime":1697488743888,"results":"44","hashOfConfig":"25"},{"size":1430,"mtime":1697568656338,"results":"45","hashOfConfig":"25"},{"size":4736,"mtime":1697664056694,"results":"46","hashOfConfig":"25"},{"size":5057,"mtime":1716234089192,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sx343e",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/index.tsx",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/reportWebVitals.ts",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/App.tsx",["128","129","130"],[],"import { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport './App.css';\nimport socketService from './services/socketService';\nimport { JoinRoom } from './components/joinRoom/joinRoom/joinRoom';\nimport { Game } from './components/game/game/game';\nimport gameService from './services/gameService';\nimport { ChatState, CurrentLobbyState } from './components/recoilTypes';\nimport { ServerEvents } from './shared/types/serverEvents';\nimport { ServerPayloads } from './shared/types/serverPayloads';\n\nfunction App() {\n  const [gameState, setGameState] = useRecoilState(CurrentLobbyState);\n  const [chatState, setChatState] = useRecoilState(ChatState);\n\n  const messageListener = (data: ServerPayloads[ServerEvents.GameMessage]) => {\n    setChatState((oldChat: ServerPayloads[ServerEvents.GameMessage][]) => [...oldChat, data]);\n  }\n\n  const handleGameMessage = () => {\n    if (socketService.socket) {\n      gameService.onGameMessage(socketService.socket, messageListener);\n    }\n  }\n\n  const removeGameMessage = () => {\n    if (socketService.socket) {\n      gameService.offGameMessage(socketService.socket, messageListener);\n    }\n  }\n\n\n  const connectSocket = async () => {\n    const socket = await socketService\n      .connect(\"https://pass-em-api.onrender.com\")\n      .catch((err) => {\n        console.log(\"Error: \", err);\n      });\n  };\n\n  const handleGameUpdate = () => {\n    if (socketService.socket) {\n      gameService.onGameUpdate(socketService.socket, (data) => {\n        setGameState(data);\n      });\n    }\n  }\n\n  const removeGameUpdate = () => {\n    if (socketService.socket) {\n      gameService.offGameUpdate(socketService.socket, (data) => {\n        setGameState(data);\n      });\n    }\n  }\n  \n\n  useEffect(() => {\n    // window.onbeforeunload = function(event)\n    // {\n    //     return window.confirm(\"Confirm refresh\");\n    // };\n    \n    if (!socketService.socket) {\n      connectSocket();\n    }\n      \n    handleGameUpdate();\n    handleGameMessage();\n\n    return () => {\n      removeGameUpdate();\n      removeGameMessage();\n      socketService.socket?.off(ServerEvents.GameMessage);\n    }\n  }, []);\n\n  return (\n    <div id=\"app\">\n      {gameState === null ? \n        <JoinRoom /> : \n        <Game />}\n    </div>\n    \n  );\n}\n\nexport default App;\n","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/services/socketService.ts",["131"],[],"import { io, Socket } from \"socket.io-client\";\nimport { DefaultEventsMap } from '@socket.io/component-emitter';\n\nclass SocketService {\n  public socket: Socket | null = null;\n\n  public connect(url: string): Promise<Socket<DefaultEventsMap, DefaultEventsMap>> {\n    return new Promise((rs, rj) => {\n      this.socket = io(url);\n\n      if (!this.socket)\n        return rj();\n\n      this.socket.on(\"connect\", () => {\n        rs(this.socket as Socket);\n      });\n\n      this.socket.on(\"connect_error\", (err) => {\n        console.log(\"Connection error: \", err);\n        rj(err);\n      })\n    });\n\n  }\n\n  \n}\n\nexport default new SocketService();","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/services/gameService.ts",["132"],[],"import { Socket } from \"socket.io-client\";\nimport { ClientEvents } from \"../shared/types/clientEvents\";\nimport { ServerEvents } from \"../shared/types/serverEvents\";\nimport { ServerPayloads } from \"../shared/types/serverPayloads\";\nimport { SocketExceptions } from \"../shared/types/socketExceptions\";\n\nclass GameService {\n  // join/create\n  public async createGameRoom(socket: Socket, roomId: string, roomPassword: string, userName: string, numPlayers: number, finalScore: number, isRebuttal: boolean): Promise<boolean> {\n    return new Promise((rs, rj) => {\n      const handleLobbyCreated = () => {\n        rs(true);\n        socket.off(ServerEvents.LobbyCreated, handleLobbyCreated);\n        socket.off(SocketExceptions.LobbyError, handleLobbyError);\n      };\n  \n      const handleLobbyError = ({ error }) => {\n        rj(error);\n        socket.off(ServerEvents.LobbyCreated, handleLobbyCreated);\n        socket.off(SocketExceptions.LobbyError, handleLobbyError);\n      };\n  \n      socket.emit(ClientEvents.LobbyCreate, { roomId: roomId, roomPassword: roomPassword, userName: userName, numPlayers: numPlayers, finalScore: finalScore, isRebuttal: isRebuttal });\n  \n      socket.on(ServerEvents.LobbyCreated, handleLobbyCreated);\n      socket.on(SocketExceptions.LobbyError, handleLobbyError);\n   \n    });\n  }\n\n  public async joinGameRoom(socket: Socket, roomId: string, roomPassword: string, userName: string): Promise<boolean> {\n    return new Promise((rs, rj) => {\n      const handleLobbyJoined = () => {\n        rs(true);\n        socket.off(ServerEvents.LobbyJoined, handleLobbyJoined);\n        socket.off(SocketExceptions.LobbyError, handleLobbyError);\n      };\n  \n      const handleLobbyError = ({ error }) => {\n        rj(error);\n        socket.off(ServerEvents.LobbyJoined, handleLobbyJoined);\n        socket.off(SocketExceptions.LobbyError, handleLobbyError);\n      };\n  \n      socket.emit(ClientEvents.LobbyJoin, { roomId: roomId, roomPassword: roomPassword, userName: userName });\n  \n      socket.on(ServerEvents.LobbyJoined, handleLobbyJoined);\n      socket.on(SocketExceptions.LobbyError, handleLobbyError);\n    });\n  }\n\n  public async joinRandomGameRoom(socket: Socket, userName: string): Promise<boolean> {\n    return new Promise((rs, rj) => {\n      const handleLobbyJoined = () => {\n        rs(true);\n        socket.off(ServerEvents.LobbyJoined, handleLobbyJoined);\n        socket.off(SocketExceptions.LobbyError, handleLobbyError);\n      };\n  \n      const handleLobbyError = ({ error }) => {\n        rj(error);\n        socket.off(ServerEvents.LobbyJoined, handleLobbyJoined);\n        socket.off(SocketExceptions.LobbyError, handleLobbyError);\n      };\n  \n      socket.emit(ClientEvents.LobbyJoinRandom, { userName: userName });\n  \n      socket.on(ServerEvents.LobbyJoined, handleLobbyJoined);\n      socket.on(SocketExceptions.LobbyError, handleLobbyError);\n    });\n  }\n\n  public async leaveGameRoom(socket: Socket): Promise<boolean> {\n    return new Promise((rs, rj) => {\n      const handleLobbyLeft = () => {\n        rs(true);\n        socket.off(ServerEvents.LobbyLeft, handleLobbyLeft);\n        socket.off(SocketExceptions.LobbyError, handleLobbyError);\n      };\n  \n      const handleLobbyError = ({ error }) => {\n        rj(error);\n        socket.off(ServerEvents.LobbyLeft, handleLobbyLeft);\n        socket.off(SocketExceptions.LobbyError, handleLobbyError);\n      };\n  \n      socket.emit(ClientEvents.LobbyLeave);\n  \n      socket.on(ServerEvents.LobbyLeft, handleLobbyLeft);\n      socket.on(SocketExceptions.LobbyError, handleLobbyError);\n    });\n  }  \n  \n\n  // messages sent to server\n  public async updateGame(socket: Socket, choice: string) {\n    socket.emit(ClientEvents.GameUpdate, { choice: choice });\n  }\n\n  public async startGameEarly(socket: Socket) {\n    socket.emit(ClientEvents.GameStartEarly);\n  }\n\n  public async restartGame(socket: Socket) {\n    socket.emit(ClientEvents.GameRestart);\n  }\n\n  public async sendChatMessage(socket: Socket, message: string, senderName: string, senderCode: number) {\n    let chatMessage: ServerPayloads[ServerEvents.GameMessage] = {\n      message: message,\n      senderName: senderName,\n      senderCode: senderCode,\n    }\n    socket.emit(ClientEvents.GameChatMessage, chatMessage);\n  }\n\n  \n\n  // messages from server\n  public async onGameUpdate(socket: Socket, listener: (data: ServerPayloads[ServerEvents.LobbyState]) => void) {\n    socket.on(ServerEvents.LobbyState, ( data ) => {\n      listener(data);\n    });\n  }\n  public async offGameUpdate(socket: Socket, listener: (data: ServerPayloads[ServerEvents.LobbyState]) => void) {\n    socket.off(ServerEvents.LobbyState, listener);\n  }\n\n  public async onGameMessage(socket: Socket, listener: (data: ServerPayloads[ServerEvents.GameMessage]) => void) {\n    socket.on(ServerEvents.GameMessage, ( data ) => {\n      listener(data);\n    });\n  }\n  public async offGameMessage(socket: Socket, listener: (data: ServerPayloads[ServerEvents.GameMessage]) => void) {\n    socket.off(ServerEvents.GameMessage, ( data ) => {\n      listener(data);\n    });\n  }\n\n}\n\n\nexport default new GameService();","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/shared/types/socketExceptions.ts",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/shared/types/clientEvents.ts",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/shared/types/serverEvents.ts",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/game/game.tsx",["133","134","135"],[],"import { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { ShowMenuState, ShowRulesState } from '../../recoilTypes';\nimport { GameRoom } from '../gameRoom/gameRoom';\nimport './game.css';\n\n\n\nexport function Game() {\n  const [isShowMenu, setShowMenu] = useRecoilState(ShowMenuState);\n  const [isShowRules, setShowRules] = useRecoilState(ShowRulesState);\n\n\n  const initializeState = () => {\n    setShowMenu(false);\n    setShowRules(false);\n  }\n  \n  useEffect(() => {\n    initializeState();\n  }, []);\n\n  return (\n    <div id='gameOuter'>\n      <GameRoom />\n    </div>\n  );\n\n\n}","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameRoom/gameRoom.tsx",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameTable/gameTable.tsx",["136","137","138"],[],"import { useRecoilValue, useRecoilState } from 'recoil';\nimport { ShowMenuState, ShowRulesState, CurrentLobbyState } from '../../recoilTypes';\nimport './gameTable.css';\nimport { GameMenu } from './gameMenu/gameMenu';\nimport { GamePigs } from './gamePigs/gamePigs';\nimport { GameRules } from './gameRules/gameRules';\n\n\nexport function GameTable() {\n  const gameState = useRecoilValue(CurrentLobbyState)!;\n  const [isShowMenu, setShowMenu] = useRecoilState(ShowMenuState);\n  const [isShowRules, setShowRules] = useRecoilState(ShowRulesState);\n\n\n  let players = Object.entries(gameState.scores);\n\n  const isPlayerTurn = (index: number): boolean => {\n    const [key, value] = players[index]\n    return gameState.currentTurnPlayer === key;\n  }\n\n  return (\n    <div id=\"tableOuter\">\n      { isShowMenu && \n        <GameMenu /> \n      }\n      { isShowRules ? \n        <GameRules /> :\n\n        <div id=\"tableWithPlayers\">\n          <div id=\"table\">\n            <GamePigs />\n          </div>\n\n          <div id=\"tablePlayers\">\n            {players.map(([key, value], index) => (\n              <div className='tablePlayerOuter' id={`tablePlayer-${index}`} key={key}>\n                <div className='nameTag'>\n                  <p>{value.name}</p>\n                </div>\n                \n                <div \n                  className={isPlayerTurn(index) ? 'tablePlayerTurn' : 'tablePlayer'}\n                  id={`playerColor-${index}`}>\n                </div>\n                \n              </div>\n            ))}\n          </div>\n\n      </div>\n      \n      }\n      \n      \n    </div>\n  );\n}","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gamePlayers/gamePlayers.tsx",["139"],[],"import { useRecoilValue } from 'recoil';\nimport { CurrentLobbyState } from '../../recoilTypes';\nimport './gamePlayers.css';\n\n\n\nexport function GamePlayers() {\n  const gameState = useRecoilValue(CurrentLobbyState)!;\n  \n  let players = Object.entries(gameState.scores);\n\n  const isPlayerTurn = (index: number): boolean => {\n    const [key, value] = players[index]\n    return gameState.currentTurnPlayer === key;\n  }\n\n  return (\n    <div id='playersOuter'>\n      <h4>Scoreboard</h4>\n      <div id='playersList'>\n      \n        {players.map(([key, value], index) => (\n          <div className={isPlayerTurn(index) ? 'playerScoreTurn' : 'playerScore'} id={`playerScore-${index}`} key={key}>\n            <p>{value.name}</p>\n            <p className='scoreText'>{value.score}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameControlBar/gameControlBar.tsx",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameChat/gameChat.tsx",["140"],[],"import './gameChat.css';\nimport { useRecoilValue } from 'recoil';\nimport { ChatState, CurrentLobbyState } from '../../recoilTypes';\nimport { useState, useRef, useEffect } from 'react';\nimport socketService from \"../../../services/socketService\";\nimport gameService from \"../../../services/gameService\";\nimport send from '../../../assets/send.png';\n\nexport function GameChat() {\n  const gameState = useRecoilValue(CurrentLobbyState)!;\n  const chatState = useRecoilValue(ChatState);\n  const [chatMessage, setChatMessage] = useState(\"\");\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const handleChatMessageChange = (e: React.ChangeEvent<any>) => {\n    const value = e.target.value;\n    setChatMessage(value);\n  }\n\n  const sendChatMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (chatMessage.trim() === '') {\n      return;\n    }\n\n    if (socketService.socket) {\n      gameService.sendChatMessage(\n        socketService.socket, \n        chatMessage, \n        gameState.scores[socketService.socket.id].name,\n        findIndexById()\n        );\n    }\n    setChatMessage(\"\");\n\n  }\n\n  const findIndexById = (): number => {\n    const players = Object.entries(gameState.scores);\n    \n    for (let i = 0; i < players.length; i++) {\n      const [key, value] = players[i];\n      if (socketService.socket && key === socketService.socket.id) {\n        return i;\n      }\n    }\n    return 100; \n  }\n  \n  useEffect(() => {\n    if (chatState.length) {\n      ref.current?.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"end\",\n      });\n    }\n  }, [chatState.length]);\n  \n\n  return (\n    <div id='chatOuter'>\n      <h4 id='chatTitle'>Chat</h4>\n      <div id='chatList'>\n        {chatState.map((item, index) => (\n          <div key={index} className='chatMessage'>\n            {item.senderCode !== 100 && \n              <p className='chatName'>{item.senderName}</p>\n            }\n            <p className='chatItem' id={`chatItem-${item.senderCode}`} key={index}>{item.message}</p>\n          </div>\n        ))}\n        <div ref={ref} />\n      </div>\n      \n      <form id='chat' onSubmit={sendChatMessage}>\n        <input id='chatinput' type=\"text\" maxLength={100} placeholder=\"chat\" value={chatMessage} onChange={handleChatMessageChange}/>\n        <button id='submitchat' type=\"submit\">\n          <img id='sendicon' alt='send' src={send} />\n        </button>\n      </form>\n\n        \n    </div>\n  );\n}","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameHeader/gameHeader.tsx",["141"],[],"import { useRecoilValue, useRecoilState } from 'recoil';\nimport { ShowRulesState, UserNameState } from '../../recoilTypes';\nimport { ShowMenuState } from '../../recoilTypes';\nimport menu from '../../../assets/menu.png';\nimport x from '../../../assets/x.png';\nimport passemlogo from '../../../assets/passemlogo.png';\nimport './gameHeader.css';\n\n\nexport function GameHeader() {\n  const [isShowMenu, setShowMenu] = useRecoilState(ShowMenuState);\n  const [isShowRules, setShowRules] = useRecoilState(ShowRulesState);\n\n  const userName = useRecoilValue(UserNameState);\n\n\n  const handleMenuClick = () => {\n    setShowMenu(!isShowMenu);\n    if (isShowMenu) {\n      setShowRules(false);\n    }\n  };\n\n  return (\n    <div id='header'>\n      <div id='left'>\n        <button id='menubutton' onClick={handleMenuClick}>\n          <img id='menuicon' alt='menu' src={isShowMenu ? x : menu} />\n        </button>\n        \n        <img id='logo' alt='logo' src={passemlogo} />\n        <h2>Pass 'Em</h2>\n        \n      </div>\n      \n      <h3>{userName}</h3>\n    </div>   \n  );\n\n\n}\n\n\n","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/recoilTypes.ts",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/joinRoom/joinRoom/joinRoom.tsx",["142","143","144","145"],[],"import React, { useState } from \"react\";\nimport socketService from \"../../../services/socketService\";\nimport gameService from \"../../../services/gameService\";\nimport { useRecoilValue, useRecoilState } from 'recoil';\n\nimport './joinRoom.css';\nimport { FinalScoreSelector } from \"../finalScoreSelector/finalScoreSelector\";\nimport { NumPlayersSelector } from \"../numPlayersSelector/numPlayersSelector\";\nimport { FinalScoreState, IsRandomLobbyState, NumPlayersState, RebuttalState, UserNameState } from \"../../recoilTypes\";\nimport { RebuttalSelector } from \"../rebuttalSelector/rebuttalSelector\";\nimport passemlogo from '../../../assets/passemlogo.png';\n\n\ninterface IJoinRoomProps {}\n\nexport function JoinRoom(props: IJoinRoomProps) {\n  const [roomName, setRoomName] = useState(\"\");\n  const [roomPassword, setRoomPassword] = useState(\"\");\n  const [userName, setUserName] = useRecoilState(UserNameState);\n  const [isRandomLobby, setRandomLobby] = useRecoilState(IsRandomLobbyState);\n\n\n  const numPlayers = useRecoilValue(NumPlayersState)!;\n  const finalScore = useRecoilValue(FinalScoreState)!;\n  const isRebuttal = useRecoilValue(RebuttalState)!;\n\n  const [isJoining, setJoining] = useState(false);\n  const [isCreator, setCreator] = useState(true);\n  const [isSelected, setSelected] = useState(false);\n\n  const handleUserNameChange = (e: React.ChangeEvent<any>) => {\n    const value = e.target.value;\n    setUserName(value);\n  }\n  const handleUserNameKeyDown = (e: React.KeyboardEvent<any>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n    }\n  }\n\n  const handleRoomNameChange = (e: React.ChangeEvent<any>) => {\n    const value = e.target.value;\n    setRoomName(value);\n  }\n  const handleRoomNameKeyDown = (e: React.KeyboardEvent<any>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n    }\n  }\n\n  const handleRoomPasswordChange = (e: React.ChangeEvent<any>) => {\n    const value = e.target.value;\n    setRoomPassword(value);\n  }\n  const handleRoomPasswordKeyDown = (e: React.KeyboardEvent<any>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n    }\n  }\n\n  const createOrJoinSelected = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!userName || userName.trim() === \"\") {\n      alert(\"Enter a user name!\");\n      return;\n    }\n    \n    setSelected(true);\n  }\n\n  const createOrJoinRoom = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const socket = socketService.socket;\n    if (!socket) return;\n    if (!roomName || roomName.trim() === \"\") {\n      alert(\"Enter a room name!\");\n      return;\n    }\n    if (!roomPassword || roomPassword.trim() === \"\") {\n      alert(\"Enter a password!\");\n      return;\n    }\n\n    setJoining(true);\n\n    if (isCreator) {\n      const joined = await gameService\n      .createGameRoom(socket, roomName, roomPassword, userName, numPlayers, finalScore, isRebuttal)\n      .catch((err) => {\n        alert(err);\n      });\n\n    } else {\n      const joined = await gameService\n      .joinGameRoom(socket, roomName, roomPassword, userName)\n      .catch((err) => {\n        alert(err);\n      });\n      \n    }\n\n    setJoining(false);\n\n  }\n\n  const joinRandomRoom = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const socket = socketService.socket;\n    if (!socket) return;\n\n    if (!userName || userName.trim() === \"\") {\n      alert(\"Enter a user name!\");\n      return;\n    }\n\n    setJoining(true);\n\n\n    const joined = await gameService\n    .joinRandomGameRoom(socket, userName)\n    .catch((err) => {\n      alert(err);\n    });\n\n    setJoining(false);\n    setRandomLobby(true);\n\n  }\n\n\n\n  return (\n    <div>\n      <div id='joinHeader'>\n        <div id='titleLogo'>\n          <img id='logo' alt='logo' src={passemlogo} />\n          <h2>Pass 'Em</h2>\n          \n        </div>\n        \n        \n        <h3>{userName}</h3>\n      </div>\n      \n      <div id='outer'>\n      {!isSelected ? (\n        <div className=\"inner\">\n          <form id='select' onSubmit={createOrJoinSelected} >\n            <div id='welcome'>\n              <h2>Welcome to Pass 'Em</h2>\n              <h3>A Free Online Alternative to Pass the Pigs</h3>\n            </div>\n            <div id='nameInput'>\n              <p>Enter your name</p>\n              <input type=\"text\" maxLength={15} placeholder=\"name\" value={userName}  required onChange={handleUserNameChange} onKeyDown={handleUserNameKeyDown}/>\n            </div>\n            <div id='createOrJoin'>\n              <p>Do you want to create or join a lobby?</p>\n              <div id='buttonsOuter'>\n                <div id='buttons'>\n                  <button id='create' className='select' type=\"submit\" onClick={() => setCreator(true)}>Create Lobby</button>\n                  <button id='join' className='select' type=\"submit\" onClick={() => setCreator(false)}>Join Lobby</button>\n                </div>\n                <button id='joinRandom' className='select' type=\"button\" onClick={joinRandomRoom} disabled={isJoining}>Join Random Lobby</button>\n\n              </div>\n            </div>\n            \n          </form>\n        </div>\n      ) : (\n        <div className=\"inner\">\n          <form id='start' onSubmit={createOrJoinRoom}>\n            <button id='goback' onClick={() => setSelected(false)} disabled={isJoining}> \n              Go back\n            </button>\n            <div className='roomInput'>\n              <p className='roomNameText'>Room Name:</p>\n              <input type=\"text\" required maxLength={15} placeholder=\"Room Name\" value={roomName} onChange={handleRoomNameChange} onKeyDown={handleRoomNameKeyDown}/>\n            </div>\n            <div className='roomInput'>\n              <p className='roomNameText'>Room Password:</p>\n              <input type=\"password\" required maxLength={15} placeholder=\"Password\" value={roomPassword} onChange={handleRoomPasswordChange} onKeyDown={handleRoomPasswordKeyDown}/>\n            </div>\n            {isCreator &&\n              <div id='creationOptions'>\n                <NumPlayersSelector />\n                <FinalScoreSelector />\n                <RebuttalSelector />\n              </div>\n              \n            }\n            <button id='start' className={isCreator ? \"createStart\" : \"createJoin\"} type=\"submit\" disabled={isJoining}>\n              {isCreator ? \n                (isJoining ? \"Creating...\" : \"Create\") :\n                (isJoining ? \"Joining...\" : \"Join\")}\n            </button>\n          </form>\n        </div>\n      )}\n      </div>\n    </div>\n    \n  );\n\n}","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/joinRoom/finalScoreSelector/finalScoreSelector.tsx",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/joinRoom/numPlayersSelector/numPlayersSelector.tsx",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/joinRoom/rebuttalSelector/rebuttalSelector.tsx",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameTable/gameMenu/gameMenu.tsx",["146","147","148"],[],"import { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport { ChatState, CurrentLobbyState, ShowRulesState } from '../../../recoilTypes';\nimport './gameMenu.css';\nimport gameService from '../../../../services/gameService';\nimport socketService from '../../../../services/socketService';\n\n\nexport function GameMenu() {\n  const gameState = useRecoilValue(CurrentLobbyState)!;\n  const setGameState = useSetRecoilState(CurrentLobbyState);\n  const [chatState, setChatState] = useRecoilState(ChatState);\n  const [isShowRules, setShowRules] = useRecoilState(ShowRulesState);\n\n  const handleLeaveButton = async () => {\n    if (socketService.socket) {\n      const left = await gameService\n      .leaveGameRoom(socketService.socket)\n      .catch((err) => {\n        alert(err);\n      });\n      \n      setGameState(null);\n      setChatState([]);\n\n    }\n  }\n\n  const handleRulesClick = () => {\n    setShowRules(true);\n  };\n\n  return (\n    <div id='menu'>\n      <div id='menuInner'>\n        <div id='gameOptions'>\n          <p>Game Options: </p>\n          <div>\n            <p>Target Score: {gameState.finalScore}</p>\n            <p>Rebuttal: {gameState.isRebuttal ? 'On' : 'Off'}</p>\n          </div>\n          \n        </div>\n        \n        <button id='showrules' onClick={handleRulesClick}>Rules</button>\n        <button id='leave' onClick={() => handleLeaveButton()} >Leave</button>\n      </div>\n    </div>\n  );\n\n\n}","/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameTable/gamePigs/gamePigs.tsx",[],[],"/Users/dcglynn/WebApps/pass_em_1/workspaces/client/src/components/game/gameTable/gameRules/gameRules.tsx",["149","150"],[],"import { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { ShowRulesState } from '../../../recoilTypes';\nimport './gameRules.css';\nimport x from '../../../../assets/x.png';\n\nconst pigImages = [\n  require('../../../../assets/pigs/pig0.png'),\n  require('../../../../assets/pigs/pig1.png'),\n  require('../../../../assets/pigs/pig2.png'),\n  require('../../../../assets/pigs/pig3.png'),\n  require('../../../../assets/pigs/pig4.png'),\n  require('../../../../assets/pigs/pig5.png'),\n];\n\nexport function GameRules() {\n  const [isShowRules, setShowRules] = useRecoilState(ShowRulesState);\n\n  const handleCloseClick = () => {\n    setShowRules(false);\n  };\n\n  return (\n    <div id='gameRules'>\n      <div id='rulesHeader'>\n        <h3 id='rulesTitle'>Rules</h3>\n        <button id='close' onClick={handleCloseClick}>\n          <img id='closeicon' alt='close' src={x} />\n        </button>\n      </div>\n      <div id='rulesExplanation'>\n        <p>On your turn: </p>\n        <p className='indent'>Roll as many as times as you want until you decide to pass or roll a pig out! (see below)</p>\n        <p>To win: </p>\n        <p className='indent'>Reach the target score before anyone else OR If Rebuttal is on, have the most total points after the final turn.</p>\n        <p>Scoring:</p>\n      </div>\n\n      <div id='scoring'>\n        <div className='scoringRow'>\n          <div className='scoringExample'>\n            <div id=\"pigs\">\n              <img className='pigImageRules' id='pig-0' src={pigImages[0]} alt={'pig0'}></img>\n              <img className='pigImageRules' id='pig-1' src={pigImages[1]} alt={'pig1'}></img>\n            </div>\n            <div id='pigScore'>\n              <p id='rollName'>Pig Out!</p>\n              <p id='rollScore' className='asterix'>0*</p>\n            </div>\n          </div>\n\n          <div className='scoringExample'>\n            <div id=\"pigs\">\n              <img className='pigImageRules' id='pig-0' src={pigImages[0]} alt={'pig0'}></img>\n              <img className='pigImageRules' id='pig-0' src={pigImages[0]} alt={'pig0'}></img>\n            </div>\n            <div id='pigScore'>\n              <p id='rollName'></p>\n              <p id='rollScore'>0</p>\n            </div>\n          </div>\n\n          <div className='scoringExample'>\n            <div id=\"pigs\">\n              <img className='pigImageRules' id='pig-1' src={pigImages[1]} alt={'pig1'}></img>\n              <img className='pigImageRules' id='pig-1' src={pigImages[1]} alt={'pig1'}></img>\n            </div>\n            <div id='pigScore'>\n              <p id='rollName'>Sider</p>\n              <p id='rollScore'>1</p>\n            </div>\n          </div>\n\n          <div className='scoringExample'>\n            <div id=\"pigs\">\n              <img className='pigImageRules' id='pig-2' src={pigImages[2]} alt={'pig2'}></img>\n              <img className='pigImageRules' id='pig-2' src={pigImages[2]} alt={'pig2'}></img>\n            </div>\n            <div id='pigScore'>\n              <p id='rollName'>Double (of any roll)</p>\n              <p className='double' id='rollScore'>x2</p>\n            </div>\n          </div>\n        </div>\n        <div className='scoringRow'>\n          <div className='scoringExample'>\n            <div id=\"pigs\">\n              <img className='pigImageRules' id='pig-2' src={pigImages[2]} alt={'pig2'}></img>\n              <img className='pigImageRules' id='pig-0' src={pigImages[0]} alt={'pig0'}></img>\n            </div>\n            <div id='pigScore'>\n              <p id='rollName'>Razorback</p>\n              <p id='rollScore'>5</p>\n            </div>\n          </div>\n\n          <div className='scoringExample'>\n            <div id=\"pigs\">\n              <img className='pigImageRules' id='pig-3' src={pigImages[3]} alt={'pig3'}></img>\n              <img className='pigImageRules' id='pig-0' src={pigImages[0]} alt={'pig0'}></img>\n            </div>\n            <div id='pigScore'>\n              <p id='rollName'>Trotter</p>\n              <p id='rollScore'>5</p>\n            </div>\n          </div>\n\n          <div className='scoringExample'>\n            <div id=\"pigs\">\n              <img className='pigImageRules' id='pig-4' src={pigImages[4]} alt={'pig4'}></img>\n              <img className='pigImageRules' id='pig-0' src={pigImages[0]} alt={'pig0'}></img>\n            </div>\n            <div id='pigScore'>\n              <p id='rollName'>Snouter</p>\n              <p id='rollScore'>10</p>\n            </div>\n          </div>\n\n          <div className='scoringExample'>\n            <div id=\"pigs\">\n              <img className='pigImageRules' id='pig-5' src={pigImages[5]} alt={'pig5'}></img>\n              <img className='pigImageRules' id='pig-0' src={pigImages[0]} alt={'pig0'}></img>\n            </div>\n            <div id='pigScore'>\n              <p id='rollName'>Leaning Jowler</p>\n              <p id='rollScore'>15</p>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n\n      <p id='asterixExplanation'>*Lose all points for this turn and pass</p>\n\n    </div>\n  );\n\n\n}",{"ruleId":"151","severity":1,"message":"152","line":14,"column":10,"nodeType":"153","messageId":"154","endLine":14,"endColumn":19},{"ruleId":"151","severity":1,"message":"155","line":34,"column":11,"nodeType":"153","messageId":"154","endLine":34,"endColumn":17},{"ruleId":"156","severity":1,"message":"157","line":76,"column":6,"nodeType":"158","endLine":76,"endColumn":8,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":29,"column":1,"nodeType":"162","endLine":29,"endColumn":36},{"ruleId":"160","severity":1,"message":"161","line":143,"column":1,"nodeType":"162","endLine":143,"endColumn":34},{"ruleId":"151","severity":1,"message":"163","line":10,"column":10,"nodeType":"153","messageId":"154","endLine":10,"endColumn":20},{"ruleId":"151","severity":1,"message":"164","line":11,"column":10,"nodeType":"153","messageId":"154","endLine":11,"endColumn":21},{"ruleId":"156","severity":1,"message":"165","line":21,"column":6,"nodeType":"158","endLine":21,"endColumn":8,"suggestions":"166"},{"ruleId":"151","severity":1,"message":"167","line":11,"column":22,"nodeType":"153","messageId":"154","endLine":11,"endColumn":33},{"ruleId":"151","severity":1,"message":"168","line":12,"column":23,"nodeType":"153","messageId":"154","endLine":12,"endColumn":35},{"ruleId":"151","severity":1,"message":"169","line":18,"column":17,"nodeType":"153","messageId":"154","endLine":18,"endColumn":22},{"ruleId":"151","severity":1,"message":"169","line":13,"column":17,"nodeType":"153","messageId":"154","endLine":13,"endColumn":22},{"ruleId":"151","severity":1,"message":"169","line":44,"column":19,"nodeType":"153","messageId":"154","endLine":44,"endColumn":24},{"ruleId":"151","severity":1,"message":"164","line":12,"column":10,"nodeType":"153","messageId":"154","endLine":12,"endColumn":21},{"ruleId":"151","severity":1,"message":"170","line":20,"column":10,"nodeType":"153","messageId":"154","endLine":20,"endColumn":23},{"ruleId":"151","severity":1,"message":"171","line":89,"column":13,"nodeType":"153","messageId":"154","endLine":89,"endColumn":19},{"ruleId":"151","severity":1,"message":"171","line":96,"column":13,"nodeType":"153","messageId":"154","endLine":96,"endColumn":19},{"ruleId":"151","severity":1,"message":"171","line":122,"column":11,"nodeType":"153","messageId":"154","endLine":122,"endColumn":17},{"ruleId":"151","severity":1,"message":"152","line":11,"column":10,"nodeType":"153","messageId":"154","endLine":11,"endColumn":19},{"ruleId":"151","severity":1,"message":"164","line":12,"column":10,"nodeType":"153","messageId":"154","endLine":12,"endColumn":21},{"ruleId":"151","severity":1,"message":"172","line":16,"column":13,"nodeType":"153","messageId":"154","endLine":16,"endColumn":17},{"ruleId":"151","severity":1,"message":"173","line":1,"column":10,"nodeType":"153","messageId":"154","endLine":1,"endColumn":19},{"ruleId":"151","severity":1,"message":"164","line":17,"column":10,"nodeType":"153","messageId":"154","endLine":17,"endColumn":21},"@typescript-eslint/no-unused-vars","'chatState' is assigned a value but never used.","Identifier","unusedVar","'socket' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleGameMessage', 'handleGameUpdate', 'removeGameMessage', and 'removeGameUpdate'. Either include them or remove the dependency array.","ArrayExpression",["174"],"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","'isShowMenu' is assigned a value but never used.","'isShowRules' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'initializeState'. Either include it or remove the dependency array.",["175"],"'setShowMenu' is assigned a value but never used.","'setShowRules' is assigned a value but never used.","'value' is assigned a value but never used.","'isRandomLobby' is assigned a value but never used.","'joined' is assigned a value but never used.","'left' is assigned a value but never used.","'useEffect' is defined but never used.",{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [handleGameMessage, handleGameUpdate, removeGameMessage, removeGameUpdate]",{"range":"180","text":"181"},"Update the dependencies array to be: [initializeState]",{"range":"182","text":"183"},[2130,2132],"[handleGameMessage, handleGameUpdate, removeGameMessage, removeGameUpdate]",[518,520],"[initializeState]"]